enum Sort {
  asc
  desc
}

input MessagesOrderByInput {
  content: Sort
  id: Sort
}

type Query {
  version: String!
  messages(
    filter: String
    skip: Int
    take: Int
    orderBy: MessagesOrderByInput
  ): Messages
  responses: [Response!]!
}

type Messages {
  messageList: [Message!]!
  count: Int!
}

input MessageInput {
  content: String!
}

input ResponseInput {
  content: String!
  messageId: Int!
}

type Mutation {
  createMessage(data: MessageInput!): Message!
  createResponse(data: ResponseInput!): Response!
  incrementLike(id: Int!): Message
  incrementDislike(id: Int!): Message
  decrementLike(id: Int!): Message
  decrementDislike(id: Int!): Message
}

type Subscription {
  newMessage: Message!
}

type Message {
  id: ID!
  content: String!
  likes: Int
  dislike: Int
  createdAt: String
  responses: [Response]
}

type Response {
  id: Int!
  content: String!
  message: Message
}
